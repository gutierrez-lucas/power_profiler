
XC8Application4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001f5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a84  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000758  00000000  00000000  00000cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00001417  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000144  00000144  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.UART_putc 00000006  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_puts 0000000c  00000132  00000132  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .progmemx.data 0000000c  00000080  00000080  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 17 .text.main    0000005e  0000008c  0000008c  00000100  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  0000014c  0000014c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000011c  0000011c  00000190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.memcpy  00000032  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000148  00000148  000001bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.UART_putc:

0000013e <UART_putc>:
    UBRR0H = (uint8_t)(103 >> 8);	// write to higher byte
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); // enable the transmitter and receiver
}

void UART_putc(unsigned char data){
	while(!(UCSR0A & (1 >> UDRE0))); // wait for transmit buffer to be empty
 13e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 142:	fd cf       	rjmp	.-6      	; 0x13e <UART_putc>

Disassembly of section .text.UART_puts:

00000132 <UART_puts>:
#include <stdio.h>

void setup(){
    UBRR0L = (uint8_t)(103 & 0xFF); // write to lower byte
    UBRR0H = (uint8_t)(103 >> 8);	// write to higher byte
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); // enable the transmitter and receiver
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	81 11       	cpse	r24, r1
 138:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_putc>
 13c:	08 95       	ret

Disassembly of section .text.main:

0000008c <main>:
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	2f 97       	sbiw	r28, 0x0f	; 15
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	2c e0       	ldi	r18, 0x0C	; 12
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	40 e8       	ldi	r20, 0x80	; 128
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 75 00 	call	0xea	; 0xea <memcpy>
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 b9       	out	0x04, r24	; 4
  b6:	ce 01       	movw	r24, r28
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	0e 94 99 00 	call	0x132	; 0x132 <UART_puts>
  be:	15 b8       	out	0x05, r1	; 5
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	98 e1       	ldi	r25, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x3a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x44>
  d0:	00 00       	nop
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	89 e6       	ldi	r24, 0x69	; 105
  da:	98 e1       	ldi	r25, 0x18	; 24
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x50>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x5a>
  e6:	00 00       	nop
  e8:	ea cf       	rjmp	.-44     	; 0xbe <main+0x32>

Disassembly of section .text.__dummy_fini:

0000014c <_fini>:
 14c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000014e <__funcs_on_exit>:
 14e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000150 <__simulator_exit>:
 150:	08 95       	ret

Disassembly of section .text.exit:

0000011c <exit>:
 11c:	ec 01       	movw	r28, r24
 11e:	0e 94 a7 00 	call	0x14e	; 0x14e <__funcs_on_exit>
 122:	0e 94 a6 00 	call	0x14c	; 0x14c <_fini>
 126:	ce 01       	movw	r24, r28
 128:	0e 94 a8 00 	call	0x150	; 0x150 <__simulator_exit>
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 a4 00 	call	0x148	; 0x148 <_Exit>

Disassembly of section .text.memcpy:

000000ea <memcpy>:
  ea:	cf 92       	push	r12
  ec:	df 92       	push	r13
  ee:	ef 92       	push	r14
  f0:	6a 01       	movw	r12, r20
  f2:	e6 2e       	mov	r14, r22
  f4:	dc 01       	movw	r26, r24
  f6:	28 0f       	add	r18, r24
  f8:	39 1f       	adc	r19, r25
  fa:	a2 17       	cp	r26, r18
  fc:	b3 07       	cpc	r27, r19
  fe:	51 f0       	breq	.+20     	; 0x114 <memcpy+0x2a>
 100:	f6 01       	movw	r30, r12
 102:	44 91       	lpm	r20, Z
 104:	e7 fc       	sbrc	r14, 7
 106:	40 81       	ld	r20, Z
 108:	4d 93       	st	X+, r20
 10a:	4f ef       	ldi	r20, 0xFF	; 255
 10c:	c4 1a       	sub	r12, r20
 10e:	d4 0a       	sbc	r13, r20
 110:	e4 0a       	sbc	r14, r20
 112:	f3 cf       	rjmp	.-26     	; 0xfa <memcpy+0x10>
 114:	ef 90       	pop	r14
 116:	df 90       	pop	r13
 118:	cf 90       	pop	r12
 11a:	08 95       	ret

Disassembly of section .text._Exit:

00000148 <_Exit>:
 148:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
